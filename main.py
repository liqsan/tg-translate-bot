import telebot  
import os  
import re
import json
import logging
import tempfile
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from deep_translator import GoogleTranslator

load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
BOT_TOKEN=os.getenv("token")

BOT_TOKEN = os.getenv("TOKEN")
if not BOT_TOKEN:
    raise RuntimeError ("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–∫–∞–∂–∏ TOKEN –≤ .env")

ALLOWED_STATS_USERS = {"spaccyy", "liqsan"}
                       
bot = telebot.TeleBot(BOT_TOKEN)

CYRILLIC_RE = re.compile(r"[–ê-–Ø–∞-—è–Å—ë]")
LATIN_RE    = re.compile(r"[A-Za-z]")
ONLY_EMOJI_RE = re.compile(r"^\W+$", re.UNICODE)

TYPE_RU = {
    "sticker": "—Å—Ç–∏–∫–µ—Ä—ã",
    "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
    "video": "–≤–∏–¥–µ–æ",
    "document": "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
    "audio": "–∞—É–¥–∏–æ",
    "voice": "–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
    "animation": "–∞–Ω–∏–º–∞—Ü–∏–∏",
    "video_note": "–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è",
    "emoji": "—ç–º–æ–¥–∑–∏",
    }

STATS_FILE = "stats.json"
stats = {
    "messages_total": 0,
    "by_type": {k: 0 for k in list(TYPE_RU.keys()) + ["text"]},
    "translations": {"ru_to_en": 0, "en_to_ru": 0, "other": 0},
    "users": {}
}

def _ensure_defaults():
    """–ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞."""
    global stats
    stats.setdefault("messages_total", 0)
    stats.setdefault("by_type", {})
    for k in list(TYPE_RU.keys()) + ["text"]:
        stats["by_type"].setdefault(k, 0)
    stats.setdefault("translations", {})
    for k in ["ru_to_en", "en_to_ru", "other"]:
        stats["translations"].setdefault(k, 0)
    stats.setdefault("users", {})
    stats.setdefault("usernames", {})
    stats.setdefault("names", {})
    stats.setdefault("daily", {})

def load_stats():
    global stats
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                stats = json.load(f)
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å stats.json, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç.")

def save_stats():
    """–ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å stats.json"""
    try:
        dirpath = os.path.dirname(os.path.abspath(STATS_FILE)) or "."
        with tempfile.NamedTemporaryFile("w", encoding="utf-8", dir=dirpath, delete=False) as tf:
            json.dump(stats, tf, ensure_ascii=False, indent=2)
            tmp_name = tf.name
        os.replace(tmp_name, STATS_FILE)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å stats.json")

def _utc_today_str():
    return datetime.utcnow().strftime("%Y-%m-%d")


def bump_stat(message, kind):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É."""
    stats["messages_total"] += 1
    stats["by_type"][kind] = stats["by_type"].get(kind, 0) + 1

    uid = str(message.from_user.id)
    username = (message.from_user.username or "").strip()
    first = (message.from_user.first_name or "").strip()
    last = (message.from_user.last_name or "").strip()
    display_name = (first + (" " + last if last else "")).strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    stats["users"][uid] = stats["users"].get(uid, 0) + 1
    stats["usernames"][uid] = username
    stats["names"][uid] = display_name


    day = _utc_today_str()
    day_bucket = stats["daily"].setdefault(day, {"users": {}})
    day_bucket["users"][uid] = day_bucket["users"].get(uid, 0) + 1

    save_stats()


load_stats()
    

@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"/start –æ—Ç {message.from_user.id} ({message.from_user.username})")
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n"
        "–ö–æ–º–∞–Ω–¥–∞: /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )

def _unique_users_in_range(days: int) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π, –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è."""
    if days <= 0:
        return 0
    today = datetime.utcnow().date()
    cutoff = today - timedelta(days=days - 1)
    uniq = set()
    for day_str, payload in stats.get("daily", {}).items():
        try:
            d = datetime.strptime(day_str, "%Y-%m-%d").date()
        except Exception:
            continue
        if d >= cutoff and d <= today:
            uniq.update(payload.get("users", {}).keys())
    return len(uniq)


@bot.message_handler(commands=['stats'])
def show_stats(message):
    uname = (message.from_user.username or "").lower().strip()
    if uname not in ALLOWED_STATS_USERS:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /stats –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        total_msgs = stats.get("messages_total", 0)
        bt = stats.get("by_type", {})
        tr = stats.get("translations", {})

       
        all_time_users = len(stats.get("users", {}))
        users_30d = _unique_users_in_range(30)
        users_7d = _unique_users_in_range(7)
        users_today = _unique_users_in_range(1)

        user_counts = list(stats.get("users", {}).items())
        user_counts.sort(key=lambda x: x[1], reverse=True)
        top10 = user_counts[:10]

        def pretty_name(uid: str) -> str:
            username = (stats.get("usernames", {}).get(uid) or "").strip()
            if username:
                return "@" + username
            name = (stats.get("names", {}).get(uid) or "").strip()
            return name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        top_lines = []
        for uid, cnt in top10:
            top_lines.append(f"‚Ä¢ {pretty_name(uid)} ‚Äî {cnt}")

        top_str = "\n".join(top_lines) if top_lines else "‚Äî"

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_msgs}\n\n"
            f"–ü–æ —Ç–∏–ø–∞–º:\n"
            f"‚Ä¢ —Ç–µ–∫—Å—Ç: {bt.get('text',0)}\n"
            f"‚Ä¢ —ç–º–æ–¥–∑–∏: {bt.get('emoji',0)}\n"
            f"‚Ä¢ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {bt.get('photo',0)}\n"
            f"‚Ä¢ –≤–∏–¥–µ–æ: {bt.get('video',0)}\n"
            f"‚Ä¢ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {bt.get('document',0)}\n"
            f"‚Ä¢ –∞—É–¥–∏–æ: {bt.get('audio',0)}\n"
            f"‚Ä¢ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {bt.get('voice',0)}\n"
            f"‚Ä¢ –∞–Ω–∏–º–∞—Ü–∏–∏: {bt.get('animation',0)}\n"
            f"‚Ä¢ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {bt.get('video_note',0)}\n"
            f"‚Ä¢ —Å—Ç–∏–∫–µ—Ä—ã: {bt.get('sticker',0)}\n\n"
            f"–ü–µ—Ä–µ–≤–æ–¥—ã:\n"
            f"‚Ä¢ RU ‚Üí EN: {tr.get('ru_to_en',0)}\n"
            f"‚Ä¢ EN ‚Üí RU: {tr.get('en_to_ru',0)}\n"
            f"‚Ä¢ –¥—Ä—É–≥–∏–µ: {tr.get('other',0)}\n\n"
            f"–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{top_str}"
        )
        bot.send_message(message.chat.id, text)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ /stats")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ")


@bot.message_handler(content_types=['text'])
def translate_text(message):
    text = message.text.strip()
    if not text:
        return
    
    if ONLY_EMOJI_RE.match(text):
        bump_stat(message, "emoji")
        bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–º–æ–¥–∑–∏.")
        return

    bump_stat(message, "text")



    
    if CYRILLIC_RE.search(text) and not LATIN_RE.search(text):
        target_lang = "en"; direction = "ru_to_en"
    elif LATIN_RE.search(text) and not CYRILLIC_RE.search(text):
        target_lang = "ru"; direction = "en_to_ru"
    else:
        target_lang = "en"; direction = "other"

    try:
        translated = GoogleTranslator(source="auto", target=target_lang).translate(text)
        bot.send_message(message.chat.id, translated)
        stats["translations"][direction] = stats["translations"].get(direction, 0) + 1
        save_stats()
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=[
    'photo','video','document','audio','voice','sticker','animation','video_note'
])
def echo_unsupported(message):
    ct = message.content_type
    bump_stat(message, ct)
    ru = TYPE_RU.get(ct, "—ç—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    bot.send_message(message.chat.id, f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {ru}.")

logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

bot.polling(none_stop=True, skip_pending=True)